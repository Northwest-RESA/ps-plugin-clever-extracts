<queries>
	<query name="nwgaresa.clever.students.current" coreTable="STUDENTS" flattened="true" tags="nwgaresa,clever,student,current">
	<description>
		<![CDATA[
			<script type="text/javascript">
                // columns can only be used once on the export
                const table = "students";
				const colList = [
					{field:"schoolid", label:"school_id"}
					, {field:"id", label:"student_id"}
					, {field:"student_number", label:"student_number"}
					, {field:"state_studentnumber", label:"state_id"}
					, {field:"last_name", label:"last_name"}
					, {field:"middle_name", label:"middle_name"}
					, {field:"first_name", label:"first_name"}
					, {field:"grade", label:"grade"}
					, {field:"gender", label:"gender"}
					, {field:"sched_yearofgraduation", label:"graduation_year"}
					, {field:"dob", label:"dob"}
					, {field:"race", label:"race"}
					, {field:"hispanic_latino", label:"hispanic_latino"}
					, {field:"home_language", label:"home_language"}
					, {field:"ell_status", label:"ell_status"}
					, {field:"lunchstatus", label:"frl_status"}
					, {field:"iep_status", label:"iep_status"}
					, {field:"student_street", label:"student_street"}
					, {field:"student_city", label:"student_city"}
					, {field:"student_state", label:"student_state"}
					, {field:"student_zip", label:"student_zip"}
					, {field:"person_student_email", label:"student_email"}
				];
                function selectDefaultColumns() {
                    
                    // force all of the available fields to be displayed
                    var btn_expall = document.querySelector("button[id=idExpandAll]");
                    if (btn_expall) { 
                        btn_expall.click();
                    } else {
                        var btn_expTbl = document.querySelector("button[id=" + table + "_expandBtn]")
                        if (btn_expTbl) {
                            if (window.getComputedStyle(btn_expTbl).display !== 'none') {
                                btn_expTbl.click();
                            }
                        }
                    }

                    colList.forEach(col => {
                        cb = document.querySelector("td[id=columnListContainer] [id^=cb_][id$=" + table + "_" + col.field + "]");
                        // have to check to see if the item was already selected. If it was... we should skip it
                        if (cb) {
                            if (cb.checked) { }
                        }
                        cb.click();
                        if (cb.checked) {
                            // look for the field in the selected columns and set the label.
                            document.querySelector("td[id=columnSelectionContainer] input[type=text][id^=label_cb_][id$=" + table + "_" + col.field + "]").value = col.label;
                        }
                    });
                }
                function removeAllFields() {
                    document.querySelectorAll("td[id=columnSelectionContainer] input[type=text][id^=label_cb_]").forEach(lbl => {
                        document.querySelector("td[id=columnSelectionContainer] button[id=" + lbl.id.replace('label', 'delete') + "]").click();
                    });
                }
			</script>
			<div id="pq_description">
				<h2 id="specHeader" class="toggle expanded">Clever students.csv Specification</h2>
				<div class="hide">
					<div class="rounded-box">
						<ul>
							<li>Student export data for Clever.</li>
							<li>There is a 14 day window before the first day of school and the last day of the school year.</li>
							<li>Returns all students that are currently enrolled or pre-registered in the current school year.</li>
							<li>Optional fields can be left blank or excluded from the export.</li>
						</ul>
					</div>
					<table align="center" border="0" cellpadding="4" cellspacing="0" class="grid">
						<thead>
							<tr>
								<th>Column Header *</th>
								<th>Required</th>
								<th>Format</th>
								<th>Notes</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td class="bold">school_id</td>
								<td class="bold">YES</td>
								<td>String</td>
								<td>Primary school of enrollment. school_id must match the id provided in schools.csv.</td>
							</tr>
							<tr>
								<td class="bold">student_id</td>
								<td class="bold">YES</td>
								<td>String</td>
								<td>Unique and constant id across the district for the student. Corresponds to &#39;sis_id&#39; field in Clever.</td>
							</tr>
							<tr>
								<td class="">student_number</td>
								<td class="">NO</td>
								<td>String</td>
								<td>Local student identifier for the student. Must be unique across the district.</td>
							</tr>
							<tr>
								<td class="">state_id</td>
								<td class="">NO</td>
								<td>String</td>
								<td>State student identifier for the student.</td>
							</tr>
							<tr>
								<td class="bold">last_name</td>
								<td class="bold">YES</td>
								<td>String</td>
								<td>&nbsp;</td>
							</tr>
							<tr>
								<td class="">middle_name</td>
								<td class="">NO</td>
								<td>String</td>
								<td>May submit middle initial.</td>
							</tr>
							<tr>
								<td class="bold">first_name</td>
								<td class="bold">YES</td>
								<td>String</td>
								<td>&nbsp;</td>
							</tr>
							<tr>
								<td class="bold">grade</td>
								<td class="bold">YES</td>
								<td>Option</td>
								<td>Integers for grades 1-12, &#39;Kindergarten&#39;, &#39;Prekindergarten&#39;, &#39;Postgraduate&#39;.</td>
							</tr>
							<tr>
								<td class="">gender</td>
								<td class="">NO</td>
								<td>String</td>
								<td>Supported values: <b>M F</b></td>
							</tr>
							<tr>
								<td class="">graduation_year</td>
								<td class="">NO</td>
								<td>String</td>
								<td>&nbsp;</td>
							</tr>
							<tr>
								<td class="bold">dob</td>
								<td class="bold">YES</td>
								<td>Date</td>
								<td>Date of birth. format: MM/DD/YYYYY</td>
							</tr>
							<tr>
								<td class="">race</td>
								<td class="">NO</td>
								<td>Option</td>
								<td>Supported value: <b>A B I M P W</b>
									<ul>
										<li><b>A</b> Asian</li>
										<li><b>B</b> Black or African-American</li>
										<li><b>I</b> American India or Alaska Native</li>
										<li><b>M</b> Multiracial</li>
										<li><b>P</b> Hawaiian or Pacific Islander</li>
										<li><b>W</b> White</li>
									</ul>
								</td>
							</tr>
							<tr>
								<td class="">hispanic_latino</td>
								<td class="">NO</td>
								<td>Option</td>
								<td>Supported values: <b>Y N</b></td>
							</tr>
							<tr>
								<td class="">home_language</td>
								<td class="">NO</td>
								<td>Option</td>
								<td>Supported values: English, Albanian, Amharic, Arabic, Bengali, Bosnian, Burmese, Cantonese, Chinese, Dutch, Farsi, French, German, Hebrew, Hindi, Hmong, Ilocano, Japanese, Javanese, Karen, Khmer, Korean, Laotian, Latvian, Malay, Mandarin, Nepali, Oromo, Polish, Portuguese, Punjabi, Romanian, Russian, Samoan, Serbian, Somali, Spanish, Swahili, Tagalog, Tamil, Telugu, Thai, Tigrinya, Turkish, Ukrainian, Urdu, Vietnamese</td>
							</tr>
							<tr>
								<td class="">ell_status</td>
								<td class="">NO</td>
								<td>Option</td>
								<td>English learner status. Supported values: <b>Y N</b></td>
							</tr>
							<tr>
								<td class="">frl_status</td>
								<td class="">NO</td>
								<td>Option</td>
								<td>Lunch status. Supported values: <b>F R N</b>
									<ul>
										<li><b>F</b> Free</li>
										<li><b>R</b> Reduced</li>
										<li><b>N</b> No discount</li>
									</ul>
								</td>
							</tr>
							<tr>
								<td class="">iep_status</td>
								<td class="">NO</td>
								<td>Option</td>
								<td>Special Education status. Supported values: <b>Y N</b></td>
							</tr>
							<tr>
								<td class="">student_street</td>
								<td class="">NO</td>
								<td>String</td>
								<td>&nbsp;</td>
							</tr>
							<tr>
								<td class="">student_city</td>
								<td class="">NO</td>
								<td>String</td>
								<td>&nbsp;</td>
							</tr>
							<tr>
								<td class="">student_state</td>
								<td class="">NO</td>
								<td>String</td>
								<td>Two letter abbreviation</td>
							</tr>
							<tr>
								<td class="">student_zip</td>
								<td class="">NO</td>
								<td>String</td>
								<td>5 or 9 digit ZIP with no punctuation</td>
							</tr>
							<tr>
								<td class="bold">student_email<sup>1</sup></td>
								<td class="bold">YES</td>
								<td>Email</td>
								<td>Studen&#39;s email address. Must match format: <i>x@y.z</i></td>
							</tr>
							<tr>
								<td class="">contact_relationship</td>
								<td class="">NO</td>
								<td>String</td>
								<td>Contact&#39;s relationship to the student - e.g. &#39;Father&#39;, &#39;Aunt&#39;, &#39;Neighbor&#39;.</td>
							</tr>
							<tr>
								<td class="">contact_type</td>
								<td class="">NO</td>
								<td>String</td>
								<td>Type of Contact - e.g. &#39;Family&#39;, &#39;Emergency&#39;, &#39;Guardian&#39;. <b>REQUIRED</b> if providing student contacts.</td>
							</tr>
							<tr>
								<td class="">contact_name</td>
								<td class="">NO</td>
								<td>String</td>
								<td><b>REQUIRED</b> if providing student contacts.</td>
							</tr>
							<tr>
								<td class="">contact_phone</td>
								<td class="">NO</td>
								<td>String</td>
								<td>10 or 11 digit phone number.</td>
							</tr>
							<tr>
								<td class="">contact_phone_type</td>
								<td class="">NO</td>
								<td>Option</td>
								<td>Type of phone conact. Supported values: 
									<ul>
										<li>Cell</li>
										<li>Home</li>
										<li>Work</li>
									</ul>
								</td>
							</tr>
							<tr>
								<td class="">contact_email</td>
								<td class="">NO</td>
								<td>Email</td>
								<td>Contact&#39;s email adderss. Must match format of <i>x@y.z</i>.</td>
							</tr>
							<tr>
								<td class="">contact_sis_id</td>
								<td class="">NO</td>
								<td>String</td>
								<td>Unique identifier for this contact, if one exists.</td>
							</tr>
							
							<tr>
								<td class="">username<sup>2</sup></td>
								<td class="">NO</td>
								<td>String</td>
								<td>Studen&#39;s default username if using Clever Passwords for Instant Login. Usernames will be available to connected applications.</td>
							</tr>
							<tr>
								<td class="">password<sup>3</sup></td>
								<td class="">NO</td>
								<td>String</td>
								<td>Studen&#39;s default password for Instant Login with Clever Passwords.</td>
							</tr>
							<tr>
								<td class="">unweighted_gpa</td>
								<td class="">NO</td>
								<td>String</td>
								<td></td>
							</tr>
							<tr>
								<td class="">weighted_gpa</td>
								<td class="">NO</td>
								<td>String</td>
								<td></td>
							</tr>
						</tbody>
					</table>
				</div>
				<ul>
					<li><sup>*</sup> Header rows must be labeled as listed in the table above. <b>Remove the table name and period from the label.</b> i.e. <i>STUDENTS.</i>school_id</li>
					<li><sup>1</sup> There are several places that email addresses can be stored for students. Two of the &#39;built-in&#39; methods are provided. If student emails are stored in a custom field, you will have to select that field from the list of fields. It is easier to find the custom table by selecting the [Collapse All] button, then expand the custom table that you are storing the value. They are generally found at the bottom of the list.</li>
					<li><sup>2</sup> There isn&#39;t a way to generate a custom username with a PowerQuery. STUDENT_NUMBER_AS_ID, WEB_ID, and LUNCH_ID have been provided as possible values.</li>
					<li><sup>3</sup> If you have a default password that is used within your district, it is recommended to set that as a constant value custom field for students. You can then send that value in the same way referenced in <sup>1</sup>.</li>
				</ul>
				<div class="button-row">
					<button type="button" onclick="selectDefaultColumns(); return false;">Toggle Default Columns</button>
					<button type="button" onclick="removeAllFields(); return false;">Remove All Fields</button>
				</div>
			</div>
		]]>
    </description>
	<columns>
		<column column="STUDENTS.SCHOOLID">schoolid</column>
		<column column="STUDENTS.DCID">dcid</column>
		<column column="STUDENTS.ID">id</column>
		<column column="STUDENTS.STUDENT_NUMBER">student_number</column>
		<column column="STUDENTS.STUDENT_NUMBER">student_number_as_id</column>
		<column column="STUDENTS.STATE_STUDENTNUMBER">state_studentnumber</column>
		<column column="STUDENTS.LAST_NAME">last_name</column>
		<column column="STUDENTS.FIRST_NAME">first_name</column>
		<column column="STUDENTS.MIDDLE_NAME">middle_name</column>
		<column column="STUDENTS.LASTFIRST">lastfirst</column>
		<column column="STUDENTS.GRADE_LEVEL">grade_level</column>
		<column column="STUDENTS.GRADE_LEVEL">grade</column>
		<column column="STUDENTS.GENDER">gender</column>
		<column column="STUDENTS.CLASSOF">classof</column>
		<column column="STUDENTS.DOB">dob</column>
		<column column="STUDENTS.ETHNICITY">race</column>
		<column column="STUDENTS.FEDETHNICITY">hispanic_latino</column>
		<column column="STUDENTCOREFIELDS.PRIMARYLANGUAGE">home_language</column>
		<column column="STUDENTS.TRANSACTION_DATE">date_last_modified</column>
		<column column="STUDENTS.LUNCHSTATUS">ell_status</column>
		<column column="STUDENTS.LUNCHSTATUS">lunchstatus</column>
		<column column="STUDENTS.LUNCHSTATUS">iep_status</column>
		<column column="STUDENTS.STREET">student_street</column>
		<column column="STUDENTS.CITY">student_city</column>
		<column column="STUDENTS.STATE">student_state</column>
		<column column="STUDENTS.ZIP">student_zip</column>

		<column column="STUDENTS.ZIP">psm_student_email</column>
		<column column="STUDENTS.ZIP">person_student_email</column>
		
		<column column="STUDENTS.ENTRYDATE">entrydate</column>
		<column column="STUDENTS.EXITDATE">exitdate</column>
		<column column="STUDENTS.STATE_EXCLUDEFROMREPORTING">state_excludefromreporting</column>
		<column column="STUDENTS.WEB_ID">web_id</column>
		<column column="STUDENTS.LUNCH_ID">lunch_id</column>
		<column column="STUDENTS.HOME_ROOM">home_room</column>
		<column column="STUDENTS.SCHED_YEAROFGRADUATION">sched_yearofgraduation</column>


	</columns>
	<sql>
		<![CDATA[
            -- buffering with a 14 window before the first day of school and the last day of the school year
            with curyear as (
                select t.id
                    , t.lastday
                    , t.firstday
                from terms t
                    join prefs 
                        on t.id between to_number(to_char(prefs.value) || '00') and to_number(to_char(prefs.value) || '99')
                        and lower(prefs.name) = 'coursearchiveyear'
                where 1=1
                    and t.schoolid = 0 
                    and t.isyearrec = 1
            )
            , district as (
                select district_id from (
                    select value as district_id, row_number() over (order by null) rn from prefs where name = 'districtnumber'
                ) x where x.rn = 1
            )
            , sch as (
                select 
                    sch.dcid
                    , sch.id
                    , sch.school_number as schoolid
                    , sch.alternate_school_number
                    , case when coalesce(sch.alternate_school_number, 0) <> 0 then sch.alternate_school_number else sch.school_number end as school_number
                    , lpad(d.district_id, 3, '0') 
                        || lpad(
                            case when coalesce(sch.alternate_school_number, 0) <> 0 then sch.alternate_school_number else sch.school_number end     
                            , 4, '0') as state_id
                    , sch.name 
                    , sch.abbreviation
                from schools sch, (select * from district) d
                where 1=1 
                    and sch.school_number <> 999999
            ) 
            , curstu as (
                select stu.dcid, stu.id, stu.person_id
                    , stu.schoolid, stu.student_number, stu.state_studentnumber
                    , stu.last_name, stu.first_name, stu.middle_name, stu.lastfirst
                    , stu.grade_level, stu.gender
                    , stu.classof, stu.dob, stu.ethnicity, stu.fedethnicity
                    , stu.transaction_date
                    , stu.lunchstatus, stu.street, stu.city, stu.state, stu.zip
                    , stu.entrydate, stu.exitdate, stu.state_excludefromreporting
                    , stu.web_id, stu.lunch_id, stu.sched_yearofgraduation
                    , stu.home_room
                from students stu
                    join (select * from curyear) cy on stu.entrydate between cy.firstday and cy.lastday
                where 1=1
					and stu.enroll_status in (-1, 0)
            ) 
            , stu_psmsc as (
                select
                    ssm.studentsdcid
                    , lower(psc.email) psm_studentcontact_email
                    , ssm.lastupdated
                from psm_studentcontact psc
                    inner join sync_studentmap ssm on psc.studentid = ssm.studentid
                    inner join psm_studentcontacttype psct on psc.studentcontacttypeid = psct.id
                        and psct.name = 'Self'
                        and psc.email is not null
            )            
            , stu_pea as (
                select pea.personid
                    , lower(e.emailaddress) contact_emailaddress
                    , pea.whenmodified as lastupdated
                from personemailaddressassoc pea 
                    left join emailaddress e on pea.emailaddressid = e.emailaddressid
            )
            , esol as (
                -- students that are currently el
                select DISTINCT el.studentsdcid 
                from s_ga_stu_esol_c el
                    join (select * from curyear) cy on coalesce(el.exitdate, sysdate) >= cy.firstday
                where 1=1
                    --and el.isesol = 1 -- being served currently
                    and upper(el.elflag) = 'Y' -- Y, F, M, [null]
            )
            , sped as (
                -- use s_ga_ren_speced_x for historical data (not needed for this query since we are assuming current year)
                select distinct sped.studentsdcid
                from s_ga_stu_speced_x sped
                    join (select * from curyear) cy on coalesce(sped.exitdate, sysdate) between cy.firstday and cy.lastday
                where 1=1
                    and upper(sped.all_iep) = 'Y'  -- excluding Service plan only students
            )
            
            select
                sch.schoolid
                , stu.dcid
                , stu.id
                , stu.student_number
                , stu.student_number as student_number_as_id
                , stu.state_studentnumber
                , stu.last_name
                , stu.first_name
                , stu.middle_name
                , stu.lastfirst
                
                , stu.grade_level
                , case 
                        when stu.grade_level <= -1 then 'Prekindergarten'
                        when stu.grade_level = 0 then 'Kindergarten'
                        when stu.grade_level > 12 then 'Postgraduate'
                        else cast(stu.grade_level as varchar(2)) 
                    end as grade
                    
                , upper(stu.gender) as gender
                , stu.classof
                , to_char(stu.dob, 'MM/DD/YYYY') as dob
                , case upper(stu.Ethnicity)
                        when 'S' then 'A'
                        else upper(stu.Ethnicity)
                    end as race
                , case stu.FedEthnicity when 1 then 'Y' else 'N' end as hispanic_latino    
                , stuc.primarylanguage as home_language -- this should get filtered for the supported languages...    
                , greatest(
                    coalesce(stu.transaction_date, to_date('01/01/1900', 'MM/DD/YYYY'))
                    , coalesce(stu_pea.lastupdated, to_date('01/01/1900', 'MM/DD/YYYY'))
                    , coalesce(stu_psmsc.lastupdated, to_date('01/01/1900', 'MM/DD/YYYY'))
                ) as date_last_modified
                , case when esol.studentsdcid is not null then 'Y' else 'N' end as ell_status
                , case upper(stu.lunchstatus)
                    when 'P' then 'N' 
                    when 'FDC' then 'F'
                    when 'RDC' then 'R'
                    when 'E' then 'F'
                    else upper(stu.lunchstatus) end as frl_status
                , case when sped.studentsdcid is not null then 'Y' else 'N' end as iep_status
                , stu.street
                , stu.city
                , upper(substr(stu.state, 1, 2)) as state
                , regexp_replace(stu.zip, '[^0-9]+', '') as zip
                , stu_psmsc.psm_studentcontact_email
                , stu_pea.contact_emailaddress
                , stu.entrydate
                , stu.exitdate
                , stu.state_excludefromreporting
                , stu.web_id
                , stu.lunch_id
                , stu.home_room
                , stu.sched_yearofgraduation
            from (select * from curstu) stu 
                left join (select * from stu_psmsc) stu_psmsc on stu_psmsc.studentsdcid = stu.dcid
                left join (select * from stu_pea) stu_pea on stu_pea.personid = stu.person_id
                inner join (select * from sch) sch on stu.schoolid = sch.schoolid
                left join studentcorefields stuc on stu.dcid = stuc.studentsdcid
                left join (select * from esol) esol on stu.dcid = esol.studentsdcid
                left join (select * from sped) sped on stu.dcid = sped.studentsdcid
            where 1=1
		]]>
	</sql>
	</query>

</queries>