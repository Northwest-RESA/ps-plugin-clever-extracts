<queries>
	<query name="nwgaresa.clever.enrollments.periodonly" coreTable="CC" flattened="true" tags="nwgaresa,clever,enrollments,periodonly">
	<description>
		<![CDATA[
			<script type="text/javascript">
                // columns can only be used once on the export
                if (!nwdw_ps_colList) { var nwdw_ps_colList = []; }
                nwdw_ps_colList = [
					  {table:"cc",field:"school_id", label:"school_id"}
					, {table:"cc",field:"section_id", label:"section_id"}
					, {table:"cc",field:"student_id", label:"student_id"}
				];
                function getTableNames(){
                    // Returns the unique table names from the Columns List array
                    return nw_clever_colList
                        .map((item) => item.table)
                        .filter((value, index, self) => self.indexOf(value) === index);
                }
                function selectDefaultColumns() {
                    // Ensures that the table in the selection list are expanded so the fields are accesible from the script
                    getTableNames().forEach( tbl => {
                        var btn_expTbl = document.querySelector("button[id=" + tbl + "_expandBtn]");
                        if (btn_expTbl){
                            if (window.getComputedStyle(btn_expTbl).display !== 'none'){
                                btn_expTbl.click();
                            }
                        }
                    });
                    nw_clevel_colList.forEach(col => {
                        cb = document.querySelector("td[id=columnListContainer] [id=cb_" + col.table + "_" + col.field +"]");
                        
                        if (cb) {
                            cb.click();
                            if (cb.checked){
                                // look for the field in the selected columns and set the label.
                                document.querySelector("td[id=columnSelectionContainer] input[type=text][id=label_cb_" + col.table + "_" + col.field + "]").value = col.label;
                            }
                        }else{
                            console.log(`ERROR: Field not found ${col.table}.${col.field}`);
                        }
                    });
                }
                function removeAllFields() {
                    document.querySelectorAll("td[id=columnSelectionContainer] input[type=text][id^=label_cb_]").forEach(lbl => {
                        document.querySelector("td[id=columnSelectionContainer] button[id=" + lbl.id.replace('label', 'delete') + "]").click();
                    });
                }
			</script>
			<p><b>Pair this export with the &#39;period-only&#39; section export.</b></p>
			<h2 id="specHeader" class="toggle expanded">Clever enrollments.csv Specification</h2>
            <div class="hide">
    			<div class="rounded-box">
					<ul>
						<li>Student Section Enrollment export data for Clever.</li>
						<li>There are no optional fields for this export.</li>
					</ul>
    			</div>
    			<table align="center" border="0" cellpadding="4" cellspacing="0" class="grid">
					<thead>
						<tr>
							<th>Column Header *</th>
							<th>Required</th>
							<th>Format</th>
							<th>Notes</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td class="bold">school_id</td>
							<td class="bold">YES</td>
							<td>String</td>
							<td>Corresponds to &#39;sis id&#39; field in Clever for the school. Must match a school within schools.csv.</td>
						</tr>
						<tr>
							<td class="bold">section_id</td>
							<td class="bold">YES</td>
							<td>String</td>
							<td>Corresponds to &#39;sis id&#39; field in Clever for the section. Must match a school within sections.csv.</td>
						</tr>
						<tr>
							<td class="bold">student_id</td>
							<td class="bold">YES</td>
							<td>String</td>
							<td>Corresponds to &#39;sis id&#39; field in Clever for the student. Must match a school within students.csv.</td>
						</tr>
					</tbody>
    			</table>
    		</div>
			* Header rows must be labeled as listed in the table above. <b>Remove the table name and period from the label.</b> i.e. <i>SCHOOLS.</i>school_id
            <div class="button-row">
                <button type="button" onclick="selectDefaultColumns(); return false;">Toggle Default Columns</button>
                <button type="button" onclick="removeAllFields(); return false;">Remove All Fields</button>
            </div>
		]]>
    </description>
	<columns>
		<column column="SCHOOLID">school_id</column>
		<column column="SECTIONID">section_id</column>
		<column column="STUDENTID">student_id</column>
	</columns>
	<sql>
		<![CDATA[
            with curyear as (
                select t.id
                    , t.yearid, t.lastday, t.firstday--, t.abbreviation, t.name
                from terms t
                    join prefs 
                        on t.id between to_number(to_char(prefs.value) || '00') and to_number(to_char(prefs.value) || '99')
                        and lower(prefs.name) = 'coursearchiveyear'
                where 1=1
                    and t.schoolid = 0 
                    and t.isyearrec = 1
            )
            , sch as (
                select sch.id, sch.school_number as schoolid from schools sch where sch.school_number <> 999999
            )
            , curstu as (
                select stu.dcid, stu.id, stu.person_id
                    , stu.student_number, stu.state_studentnumber
                    , stu.lunch_id
                from students stu
                    join (select * from curyear) cy on stu.entrydate between cy.firstday and cy.lastday
            )
            , tch as (
                select 
                    sch.schoolid
                    , ss.id as schoolstaff_id
                    , usr.teachernumber
                    , cast(usr.dcid as varchar(15)) as users_dcid
                    , usr.lastfirst
                    , usr.last_name
                from schoolstaff ss
                    inner join users usr on ss.users_dcid = usr.dcid
                    inner join (select * from sch) sch on sch.schoolid = ss.schoolid 
                where 1=1
                    and ss.status = 1 -- Active Staff record
            ) 
            , per_sec as (
            	-- sections compressed for a single period
            	select distinct
            		sch.id as school_id
					, -1 * first_value(s.id) over (partition by s.schoolid, s.termid, s.teacher, s.expression order by s.no_of_students desc) as section_id
            		, stu.id as student_id
                    , count(s.id) over (partition by s.schoolid, s.termid, s.expression, ltch.users_dcid) as sec_cnt
            	from sections s
					inner join terms t on s.termid = t.id
	                    and s.schoolid = t.schoolid
                    inner join (select * from sch) sch on s.schoolid = sch.schoolid
					inner join (select * from curyear) cy on t.yearid = cy.yearid
	                inner join cc on cc.sectionid = s.id
	                inner join (select * from curstu) stu on cc.studentid = stu.id
	                inner join (select * from tch) ltch on s.teacher = ltch.schoolstaff_id
	            where 1=1
	            	and s.no_of_students > 0
            )
            select school_id
            	, section_id
        		, student_id
            from per_sec
            where 1=1
            order by school_id, section_id
		]]>
	</sql>
	</query>

</queries>