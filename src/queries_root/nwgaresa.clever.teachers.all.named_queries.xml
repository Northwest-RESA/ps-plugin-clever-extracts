<queries>
	<query name="nwgaresa.clever.teachers.all" coreTable="USERS" flattened="true" tags="nwgaresa,clever,teacher,all">
	<description>
        <![CDATA[
            <script type="text/javascript">
                // columns can only be used once on the export
                if (!nwdw_ps_colList) { var nwdw_ps_colList = []; }
                nwdw_ps_colList = [
                    {table:"users",field:"homeschool_id",label:"school_id"},
                    {table:"users",field:"users_dcid",label:"teacher_id"},
                    {table:"users",field:"teachernumber",label:"teacher_number"},
                    {table:"users",field:"email_addr",label:"teacher_email"},
                    {table:"users",field:"first_name",label:"first_name"},
                    {table:"users",field:"middle_name",label:"middle_name"},
                    {table:"users",field:"last_name",label:"last_name"},
                    {table:"users",field:"title",label:"title"}
                ];
                 function getTableNames(){
                    // Returns the unique table names from the Columns List array
                    return nw_clever_colList
                        .map((item) => item.table)
                        .filter((value, index, self) => self.indexOf(value) === index);
                }
                function selectDefaultColumns() {
                    // Ensures that the table in the selection list are expanded so the fields are accesible from the script
                    getTableNames().forEach( tbl => {
                        var btn_expTbl = document.querySelector("button[id=" + tbl + "_expandBtn]");
                        if (btn_expTbl){
                            if (window.getComputedStyle(btn_expTbl).display !== 'none'){
                                btn_expTbl.click();
                            }
                        }
                    });
                    nw_clevel_colList.forEach(col => {
                        cb = document.querySelector("td[id=columnListContainer] [id=cb_" + col.table + "_" + col.field +"]");
                        
                        if (cb) {
                            cb.click();
                            if (cb.checked){
                                // look for the field in the selected columns and set the label.
                                document.querySelector("td[id=columnSelectionContainer] input[type=text][id=label_cb_" + col.table + "_" + col.field + "]").value = col.label;
                            }
                        }else{
                            console.log(`ERROR: Field not found ${col.table}.${col.field}`);
                        }
                    });
                }
                function removeAllFields() {
                    document.querySelectorAll("td[id=columnSelectionContainer] input[type=text][id^=label_cb_]").forEach(lbl => {
                        document.querySelector("td[id=columnSelectionContainer] button[id=" + lbl.id.replace('label', 'delete') + "]").click();
                    });
                }
            </script>
            <h2 id="specHeader" class="toggle collapsed">Clever teachers.csv Specification</h2>
            <div class="hide">
                <div class="rounded-box">
                <ul>
                    <li>Teacher export data for Clever.</li>
                    <li>Returns all teacher records that have a section assignment with at least one student for the current school year.</li>
                    <li>Optional fields can be left blank or excluded from the export.</li>
                </ul>
                </div>
                <table align="center" border="0" cellpadding="4" cellspacing="0" class="grid">
                    <thead>
                        <tr>
                            <th>Column Header *</th>
                            <th>Required</th>
                            <th>Format</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="bold">school_id</td>
                            <td class="bold">YES</td>
                            <td>String</td>
                            <td>Corresponds to &#39;school_id&#39; field in uploaded in the schools file.</td>
                        </tr>
                        <tr>
                            <td class="bold">teacher_id</td>
                            <td class="bold">YES</td>
                            <td>String</td>
                            <td>Unique and constant id for the teacher, may be the teacher_number, state_id, or other unique identifier, to be used in the sections.csv upload. Corresponds to the &#39;sis_id&#39; field in Clever. Unique across the district.</td>
                        </tr>
                        <tr>
                            <td class="">teacher_number</td>
                            <td class="">NO</td>
                            <td>String</td>
                            <td>Local staff identifier. Must be unique across the district.</td>
                        </tr>
                        <tr>
                            <td>state_teacher_id</td>
                            <td>NO</td>
                            <td>String</td>
                            <td>State teacher identifier. <i>Not using this field for GA</i>.</td>
                        </tr>
                        <tr>
                            <td class="bold">teacher_email</td>
                            <td class="bold">YES</td>
                            <td>Email</td>
                            <td>Email address for the teacher. Must match the format: <i>x@y.z</i></td>
                        </tr>
                        <tr>
                            <td class="bold">first_name</td>
                            <td class="bold">YES</td>
                            <td>String</td>
                            <td>First name of the teacher.</td>
                        </tr>
                        <tr>
                            <td class="">middle_name</td>
                            <td class="">NOS</td>
                            <td>String</td>
                            <td>Can also submit the middle initial.</td>
                        </tr>
                        <tr>
                            <td class="bold">last_name</td>
                            <td class="bold">YES</td>
                            <td>String</td>
                            <td>Last name of the teacher.</td>
                        </tr>
                        <tr>
                            <td>title</td>
                            <td>NO</td>
                            <td>String</td>
                            <td>Teacher&#39;s role or title.</td>
                        </tr>
                        <tr>
                            <td class="">username<sup>2</sup></td>
                            <td class="">NO</td>
                            <td>String</td>
                            <td>Teacher&#39;s default username if using Clever Passwords for Instant Login. Usernames will be available to connected applications.</td>
                        </tr>
                        <tr>
                            <td class="">password<sup>3</sup></td>
                            <td class="">NO</td>
                            <td>String</td>
                            <td>Teacher&#39;s default password for Instant Login with Clever Passwords.</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            * Header rows must be labeled as listed in the table above. <b>Remove the table name and period from the label.</b> i.e. <i>SCHOOLS.</i>school_id
            <div class="button-row">
                <button type="button" onclick="selectDefaultColumns(); return false;">Toggle Default Columns</button>
                <button type="button" onclick="removeAllFields(); return false;">Remove All Fields</button>
            </div>
        ]]>
    </description>
	<columns>
        <column column="SCHOOLSTAFF.DCID" description="The DCID field from the schoolstaff table.">schoolstaff_dcid</column>
        <column column="SCHOOLSTAFF.ID" description="The ID field from the schoolstaff table.">schoolstaff_id</column>
        <column column="DCID" description="The DCID field from the users table.">users_dcid</column>
        <column column="SCHOOLSTAFF.SCHOOLID" description="The SCHOOL_NUMBER reference from the schoolstaff table.">schoolstaff_school_id</column>
        <column column="TEACHERNUMBER" description="Local assigned number for a teacher.">teachernumber</column>
        <column column="LUNCH_ID" description="LUNCH_ID from the user table.">lunch_id</column>
        <column column="LOGINID" description="LOGINID from the user table.">loginid</column>
        <column column="TEACHERLOGINID" description="TEACHERLOGINID from the user table.">teacherloginid</column>
        
        <column column="PREFERREDNAME">preferred_name</column>
        <column column="PREFERREDNAME" description="Returns the PREFERREDNAME if defined otherwise the FIRST_NAME from the users table. ">preferred_first_name</column>
        <column column="LASTFIRST" description="PowerSchool combines name as: last, first middle. ">lastfirst</column>
        <column column="LAST_NAME">last_name</column>
        <column column="FIRST_NAME">first_name</column>
        <column column="MIDDLE_NAME">middle_name</column>
        
        <column column="EMAIL_ADDR">email_addr</column>
        <column column="EMAIL_ADDR">email_addr_no_domain</column>
        
        <column column="HOMEROOM">homeroom</column>
        <column column="TITLE">title</column>
        <column column="HOMESCHOOLID" description="The SCHOOLS.ID value for the HOMESCHOOL">homeschool_id</column>
        
        <column column="SCHOOLSTAFF.STATUS" description="SCHOOLSTAFF.STATUS values. 1 = Active">active</column>
        <column column="SCHOOLSTAFF.STAFFSTATUS" description="SCHOOLSTAFF.STAFFSTATUS Staff Types. 1 = Teacher">staff_type</column>
        <column column="USERS.PTACCESS" description="USERS.PTACCESS Teacher Portal Access Flag. 1 = Access Granted">teacher_portal_access</column>
        
        <column column="TEACHERNUMBER" description="Local assigned number for a teacher. Duplicated for additional export usage.">teachernumber_as_id</column>
        <column column="TEACHERNUMBER" description="Local assigned number for a teacher. Duplicated for additional export usage.">teachernumber_as_username</column>
        <column column="TEACHERNUMBER" description="Local assigned number for a teacher. Duplicated for additional export usage.">teachernumber_as_password</column>
        
        <column column="EMAIL_ADDR" description="Email address duplicated for export usage.">email_addr_as_id</column>
        <column column="EMAIL_ADDR" description="Email address duplicated for export usage.">email_addr_as_username</column>
        <column column="EMAIL_ADDR" description="Email address duplicated for export usage.">email_addr_as_password</column>

        <column column="TITLE" description="Blank field">blank_value_1</column>
        <column column="TITLE" description="Blank field">blank_value_2</column>
        <column column="TITLE" description="Blank field">blank_value_3</column>
        <column column="TITLE" description="Blank field">blank_value_4</column>

        <column column="TRANSACTION_DATE" description="Date and time of the last edit performed on the teacher record.">date_last_modified</column>
	</columns>
	<sql>
        <![CDATA[
            with curyear as (
                select t.id
                    , t.yearid, t.lastday, t.firstday--, t.abbreviation, t.name
                from terms t
                    join prefs 
                        on t.id between to_number(to_char(prefs.value) || '00') and to_number(to_char(prefs.value) || '99')
                        and lower(prefs.name) = 'coursearchiveyear'
                where 1=1
                    and t.schoolid = 0 
                    and t.isyearrec = 1
            )
            , sch as (
                select sch.id, sch.school_number as schoolid from schools sch where sch.school_number <> 999999
            )
            , tch as (
                select 
                    ss.dcid as schoolstaff_dcid
                    , ss.id as schoolstaff_id
                    , ss.schoolid as schoolstaff_schoolid
                    , ss.users_dcid
                    , ss.status as active -- 1 = Active  
                    , usr.ptaccess as teacher_portal_access -- 1 = Can access teacher portal
                    , ss.staffstatus  as staff_type -- 1 = Teacher Staff Type 
                    , usr.teachernumber
                    , usr.lunch_id
                    , usr.loginid
                    , usr.teacherloginid
                    , usr.preferredname
                    , usr.lastfirst
                    , usr.last_name
                    , usr.first_name
                    , usr.middle_name
                    , lower(usr.email_addr) as email_addr
                    , usr.homeroom
                    , usr.title
                    , usr.homeschoolid as homeschool_schoolid -- = schools.school_number
                    , h_sch.id as homeschool_id -- = schools.id
                    , greatest(
                        coalesce(ss.transaction_date, to_date('01/01/1900', 'MM/DD/YYYY'))
                        , coalesce(usr.transaction_date, to_date('01/01/1900', 'MM/DD/YYYY'))
                    ) as date_last_modified
                from schoolstaff ss
                    inner join users usr on ss.users_dcid = usr.dcid
                    inner join (select * from sch) sch on sch.schoolid = ss.schoolid
                    left join (select * from sch) h_sch on h_sch.schoolid = usr.homeschoolid 
            )
            , sect as (
                select distinct sec.schoolid, st.teacherid
                from sections sec
                    inner join terms t on sec.termid = t.id
                        and sec.schoolid = t.schoolid
                    inner join (select * from curyear) cy on t.yearid = cy.yearid
                    inner join sectionteacher st on sec.id = st.sectionid
                where 1=1
                    and sec.no_of_students > 0
            )
            , tch_sec as (
                -- Teachers matched with a section that has at least one student enrolled
                select 
                    tch.*
                    , row_number() over (partition by tch.teachernumber order by tch.teachernumber, case when tch.homeschool_schoolid = sect.schoolid then 0 else 1 end) seq
                from (select * from tch) tch
                    inner join (select * from sect) sect on tch.schoolstaff_id = sect.teacherid
                where 1=1
            )

            select 
                tch_1.schoolstaff_dcid
                , tch_1.schoolstaff_id
                , tch_1.users_dcid
                , tch_1.schoolstaff_schoolid
                , tch_1.teachernumber
                , tch_1.lunch_id
                , tch_1.loginid
                , tch_1.teacherloginid
                , tch_1.preferredname
                , coalesce(tch_1.preferredname, tch_1.first_name) as preferred_first_name
                , tch_1.lastfirst
                , tch_1.last_name
                , tch_1.first_name
                , tch_1.middle_name
                , tch_1.email_addr
                , substr(lower(tch_1.email_addr), 1, instr(tch_1.email_addr, '@') - 1) as email_addr_no_domain
                , tch_1.homeroom
                , tch_1.title
                , tch_1.homeschool_id
                , tch_1.active
                , tch_1.staff_type
                , tch_1.teacher_portal_access
                , tch_1.teachernumber as teacher_number_as_id
                , tch_1.teachernumber as teacher_number_as_username
                , tch_1.teachernumber as teacher_number_as_password
                , tch_1.email_addr as email_addr_as_id
                , tch_1.email_addr as email_addr_as_username
                , tch_1.email_addr as email_addr_as_password
                , '' as blank_value_1
                , '' as blank_value_2
                , '' as blank_value_3
                , '' as blank_value_4
                , tch_1.date_last_modified
            from (select * from tch_sec) tch_1
            where 1=1
                -- Returns a single record per teacher affiliation with preference to the Home School of the teacher.
                and tch_1.seq = 1
        ]]>
	</sql>
	</query>

</queries>